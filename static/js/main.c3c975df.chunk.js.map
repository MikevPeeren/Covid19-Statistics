{"version":3,"sources":["components/StatisticCard.tsx","constants/general.ts","components/LoadingWheel.tsx","api/Covid19Api.ts","components/GlobalStatistics.tsx","components/CountryLineChart.tsx","App.tsx","index.tsx"],"names":["StatisticCard","props","title","dateString","statistic","date","Date","parse","toLocaleDateString","year","month","day","hour","minute","second","avatarIcon","BugReport","ReportOutlined","Security","avatarClassNames","classNames","typographyClassNames","Card","className","variant","CardHeader","classes","avatar","subheader","CardContent","root","Typography","component","LoadingWheel","CircularProgress","size","color","thickness","getCovid19Statistics","a","axios","get","then","result","data","getCovid19StatisticsByCountry","country","GlobalStatistics","useState","covid19Statistics","setCovid19Statistics","loading","setLoading","totalConfirmed","totalDeaths","totalRecovered","useEffect","getCovid19Stats","Countries","forEach","TotalConfirmed","TotalDeaths","TotalRecovered","CountryLineChart","covid19CountryStatistics","setCovid19CountryStatistics","getCovid19CountryStatistics","dateToString","width","height","strokeDasharray","dataKey","verticalAlign","type","stroke","activeDot","r","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3c975df.chunk.js","sourcesContent":["// React\nimport React from 'react';\n\n// External\nimport classNames from 'classnames';\n\n// CSS\nimport './StatisticCard.scss';\n\n// Material UI\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Typography from '@material-ui/core/Typography';\n\n// Icons\nimport { BugReport, ReportOutlined, Security } from '@material-ui/icons';\n\n// Constants\nimport {\n  TOTAL_CONFIRMED,\n  TOTAL_DEATHS,\n  TOTAL_RECOVERED,\n} from '../constants/general';\n\ninterface StatisticCardProps {\n  title: string;\n  dateString: string;\n  statistic: number;\n}\n\nconst StatisticCard: React.FC<StatisticCardProps> = (props) => {\n  const { title, dateString, statistic } = props;\n\n  /**\n   * Parses the incoming dateString to a Date object.\n   *\n   * @param {string} dateString\n   *\n   * @returns {string}\n   */\n  const parseDateString = (): string => {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n    };\n\n    const date = new Date(Date.parse(dateString));\n    return date.toLocaleDateString('nl-NL', options);\n  };\n\n  /**\n   * Checks which Avatar Icon to get and returns it.\n   *\n   * @returns {BugReport || ReportOutlined || Security}\n   */\n  const getAvatarIcon = () => {\n    return title === TOTAL_CONFIRMED ? (\n      <BugReport />\n    ) : title === TOTAL_DEATHS ? (\n      <ReportOutlined />\n    ) : title === TOTAL_RECOVERED ? (\n      <Security />\n    ) : (\n      ''\n    );\n  };\n\n  // Parsing incoming DateString\n  const date = parseDateString();\n\n  // Dynamic rendering of the Icon & Classes happens here.\n  const avatarIcon = getAvatarIcon();\n\n  const avatarClassNames = classNames('StatisticCard__Avatar', {\n    'StatisticCard__Avatar--confirmed': title === TOTAL_CONFIRMED,\n    'StatisticCard__Avatar--deaths': title === TOTAL_DEATHS,\n    'StatisticCard__Avatar--recovered': title === TOTAL_RECOVERED,\n  });\n\n  const typographyClassNames = classNames('StatisticCard__Content', {\n    'StatisticCard__Content--confirmed': title === TOTAL_CONFIRMED,\n    'StatisticCard__Content--deaths': title === TOTAL_DEATHS,\n    'StatisticCard__Content--recovered': title === TOTAL_RECOVERED,\n  });\n\n  return (\n    <Card className=\"StatisticCard\" variant=\"outlined\">\n      <CardHeader\n        classes={{ avatar: avatarClassNames }}\n        avatar={avatarIcon}\n        title={title}\n        subheader={`Updated at: ${date}`}\n      />\n      <CardContent classes={{ root: typographyClassNames }}>\n        <Typography variant=\"h3\" component=\"p\">\n          {statistic}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StatisticCard;\n","// Api Related\nexport const COVID_19_BASE_API_URL = 'https://api.covid19api.com';\n\n// General\nexport const COVID_19_HEADER = 'COVID-19 Statistics';\nexport const TOTAL_CONFIRMED = 'Total Confirmed';\nexport const TOTAL_DEATHS = 'Total Deaths';\nexport const TOTAL_RECOVERED = 'Total Recovered';\n\nexport const FOOTER_GENERAL_HEADER = 'About this data';\nexport const FOOTER_RAPID_HEADER = 'It changes rapidly';\nexport const FOOTER_RAPID_PARAGRAPH = `\nThis data changes rapidly, so what’s shown may be out of date.\nInformation about reported cases is also available on the World Health\nOrganization site.`;\nexport const FOOTER_CASES_HEADER = 'It doesn’t include all cases';\nexport const FOOTER_CASES_PARAGRAPH = `\nConfirmed cases aren’t all cases. They only include people who tested\npositive. Testing rules and availability vary by country.\n`;\n","// React\nimport React from 'react';\n\n// External\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst LoadingWheel: React.FC = () => {\n  return (\n    <div>\n      <CircularProgress\n        size={100}\n        color={'secondary'}\n        thickness={3.5}\n        variant={'indeterminate'}\n      />\n    </div>\n  );\n};\n\nexport default LoadingWheel;\n","// Axios/Api\nimport axios from 'axios';\n\n// Constants\nimport { COVID_19_BASE_API_URL } from '../constants/general';\n\nexport const getCovid19Statistics = async () => {\n  return await axios\n    .get(`${COVID_19_BASE_API_URL}/summary`)\n    .then((result) => result.data);\n};\n\nexport const getCovid19StatisticsByCountry = async (country: string) => {\n  return await axios\n    .get(`${COVID_19_BASE_API_URL}/total/country/${country}/status/confirmed`)\n    .then((result) => result.data);\n};\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// Components\nimport StatisticCard from './StatisticCard';\nimport LoadingWheel from './LoadingWheel';\n\n// Api\nimport { getCovid19Statistics } from '../api/Covid19Api';\n\n// Constants\nimport {\n  TOTAL_CONFIRMED,\n  TOTAL_DEATHS,\n  TOTAL_RECOVERED,\n} from '../constants/general';\n\n// Interface\ninterface ICovid19Statistics {\n  Countries: [\n    {\n      TotalConfirmed: number;\n      NewConfirmed: number;\n      TotalDeaths: number;\n      NewDeaths: number;\n      TotalRecovered: number;\n    },\n  ];\n  Date: string;\n}\n\nconst GlobalStatistics = () => {\n  const [\n    covid19Statistics,\n    setCovid19Statistics,\n  ] = useState<ICovid19Statistics | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  let totalConfirmed = 0;\n  let totalDeaths = 0;\n  let totalRecovered = 0;\n\n  useEffect(() => {\n    /**\n     * Get the Global Covid 19 Statistics\n     */\n    async function getCovid19Stats() {\n      setCovid19Statistics(await getCovid19Statistics());\n      setLoading(false);\n    }\n\n    if (loading && !covid19Statistics) {\n      getCovid19Stats();\n    }\n  });\n\n  // Adjusting totalCount with a loop.\n  if (covid19Statistics) {\n    covid19Statistics.Countries.forEach((country) => {\n      totalConfirmed = totalConfirmed + country.TotalConfirmed;\n      totalDeaths = totalDeaths + country.TotalDeaths;\n      totalRecovered = totalRecovered + country.TotalRecovered;\n    });\n  }\n\n  return (\n    <>\n      {loading && <LoadingWheel />}\n      {!loading && covid19Statistics && (\n        <div className=\"Covid19__GlobalStatistics\">\n          <StatisticCard\n            title={TOTAL_CONFIRMED}\n            dateString={covid19Statistics.Date}\n            statistic={totalConfirmed}\n          ></StatisticCard>\n          <StatisticCard\n            title={TOTAL_DEATHS}\n            dateString={covid19Statistics.Date}\n            statistic={totalDeaths}\n          ></StatisticCard>\n          <StatisticCard\n            title={TOTAL_RECOVERED}\n            dateString={covid19Statistics.Date}\n            statistic={totalRecovered}\n          ></StatisticCard>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GlobalStatistics;\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// External\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\n\n// Components\nimport LoadingWheel from './LoadingWheel';\n\n// CSS\nimport './CountryLineChart.scss';\n\n// Api\nimport { getCovid19StatisticsByCountry } from '../api/Covid19Api';\n\n// Interface\ninterface ICovid19CountryStatistics {\n  Country: string;\n  Province: string;\n  Lat: number;\n  Lon: number;\n  Date: string;\n  Cases: number;\n  Status: string;\n}\n\nconst CountryLineChart: React.FC = () => {\n  const [covid19CountryStatistics, setCovid19CountryStatistics] = useState<\n    [ICovid19CountryStatistics] | null\n  >(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    /**\n     * Gets the Statistics for a specific Country.\n     */\n    async function getCovid19CountryStatistics() {\n      setCovid19CountryStatistics(\n        // TODO: Make an input field for country.\n        await getCovid19StatisticsByCountry('netherlands'),\n      );\n    }\n\n    if (loading && !covid19CountryStatistics) {\n      getCovid19CountryStatistics();\n    }\n  });\n\n  useEffect(() => {\n    /**\n     * Formatting the Date so that our Charts can handle it correctly.\n     */\n    function formatCovid19CountryStatistics() {\n      if (covid19CountryStatistics) {\n        covid19CountryStatistics.forEach((country) => {\n          // Parsing incoming DateString\n          const options = {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n          };\n          const date = new Date(Date.parse(country.Date));\n          const dateToString = date.toLocaleDateString('nl-NL', options);\n          // We change our DataSet here as we know we will only use it on this page.\n          country.Date = dateToString;\n        });\n        setLoading(false);\n      }\n    }\n\n    if (covid19CountryStatistics) {\n      formatCovid19CountryStatistics();\n    }\n  }, [covid19CountryStatistics, loading]);\n\n  // TODO: Add Responsive Layout\n  return (\n    <>\n      {loading && <LoadingWheel />}\n      {covid19CountryStatistics && (\n        <div className=\"CountryLineChart\">\n          <LineChart width={600} height={300} data={covid19CountryStatistics}>\n            <CartesianGrid strokeDasharray=\"1 1\" />\n            <XAxis dataKey=\"Date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend verticalAlign=\"top\" height={36} />\n            <Line\n              type=\"monotone\"\n              dataKey=\"Cases\"\n              stroke=\"#8884d8\"\n              activeDot={{ r: 8 }}\n            />\n          </LineChart>\n          <span className=\"CountryLineChart__Country--label\">\n            The Netherlands\n          </span>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default CountryLineChart;\n","// React\nimport React from 'react';\n\n// CSS\nimport './App.scss';\n\n// Components\nimport GlobalStatistics from './components/GlobalStatistics';\nimport CountryLineChart from './components/CountryLineChart';\n\n// Constants\nimport {\n  COVID_19_HEADER,\n  FOOTER_GENERAL_HEADER,\n  FOOTER_RAPID_HEADER,\n  FOOTER_RAPID_PARAGRAPH,\n  FOOTER_CASES_HEADER,\n  FOOTER_CASES_PARAGRAPH,\n} from './constants/general';\n\nconst App = () => {\n  return (\n    <div className=\"Covid19\">\n      <header className=\"Covid19__Header\">{COVID_19_HEADER}</header>\n      <div className=\"Covid19__GlobalStatistics\">\n        <GlobalStatistics />\n      </div>\n      <div className=\"Covid19__CountryLineChart\">\n        <CountryLineChart />\n      </div>\n      <footer className=\"Covid19__Footer\">\n        <h3 className=\"Covid19__Footer--h3\">{FOOTER_GENERAL_HEADER}</h3>\n        <h4 className=\"Covid19__Footer--h4\">{FOOTER_RAPID_HEADER}</h4>\n        <p className=\"Covid19__Footer--p\">{FOOTER_RAPID_PARAGRAPH}</p>\n        <h4 className=\"Covid19__Footer--h4\">{FOOTER_CASES_HEADER}</h4>\n        <p className=\"Covid19__Footer--p\">{FOOTER_CASES_PARAGRAPH}</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './index.scss';\n\n// Components\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}