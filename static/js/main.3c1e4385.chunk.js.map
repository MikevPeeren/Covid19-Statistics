{"version":3,"sources":["components/StatisticCard.tsx","constants/general.ts","components/LoadingWheel.tsx","api/Covid19Api.ts","components/GlobalStatistics.tsx","components/CountryAreaChart.tsx","components/SearchForm.tsx","App.tsx","index.tsx"],"names":["StatisticCard","props","title","dateString","statistic","date","Date","parse","toLocaleDateString","year","month","day","hour","minute","second","avatarIcon","BugReport","ReportOutlined","Security","avatarClassNames","classNames","typographyClassNames","Card","className","variant","CardHeader","classes","avatar","subheader","CardContent","root","Typography","component","LoadingWheel","CircularProgress","size","color","thickness","getCovid19Statistics","a","axios","get","then","result","data","getCovid19StatisticsByCountryAndStatus","country","status","GlobalStatistics","useState","covid19Statistics","setCovid19Statistics","loading","setLoading","totalConfirmed","totalDeaths","totalRecovered","useEffect","getCovid19Stats","Countries","forEach","TotalConfirmed","TotalDeaths","TotalRecovered","CountryAreaChart","undefined","covid19CountryStatistics","setCovid19CountryStatistics","covid19StatisticsByCountry","covid19StatisticsByCountryDeaths","covid19StatisticsByCountryRecovered","handleCovid19StatisticsByCountry","covid19ResultWithConfirmed","handleCovid19StatisticsByCountryDeaths","covid19ResultWithDeaths","handleCovid19StatisticsByCountryRecovered","covid19ResultWithRecovered","getCovid19CountryStatistics","Object","keys","length","map","dateToString","parseDate","Confirmed","Cases","countryFound","find","countryWithConfirmed","Deaths","countryWithDeaths","Recovered","countryDate","style","width","height","strokeDasharray","dataKey","verticalAlign","type","fillOpacity","stroke","fill","SearchForm","input","setInput","FormControl","onKeyPress","event","key","setCountryState","InputLabel","htmlFor","Input","value","onChange","target","id","aria-describedby","FormHelperText","App","setCountry","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c1e4385.chunk.js","sourcesContent":["// React\nimport React from 'react';\n\n// External\nimport classNames from 'classnames';\n\n// CSS\nimport './StatisticCard.scss';\n\n// Material UI\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Typography from '@material-ui/core/Typography';\n\n// Icons\nimport { BugReport, ReportOutlined, Security } from '@material-ui/icons';\n\n// Constants\nimport { TOTAL_CONFIRMED, TOTAL_DEATHS, TOTAL_RECOVERED } from '../constants/general';\n\ninterface IStatisticCardProps {\n  title: string;\n  dateString: string;\n  statistic: number;\n}\n\nconst StatisticCard: React.FC<IStatisticCardProps> = (props) => {\n  const { title, dateString, statistic } = props;\n\n  /**\n   * Parses the incoming dateString to a Date object.\n   *\n   * @param {string} dateString\n   *\n   * @returns {string}\n   */\n  const parseDateString = (): string => {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n    };\n\n    const date = new Date(Date.parse(dateString));\n    return date.toLocaleDateString('nl-NL', options);\n  };\n\n  /**\n   * Checks which Avatar Icon to get and returns it.\n   *\n   * @returns {BugReport || ReportOutlined || Security}\n   */\n  const getAvatarIcon = () => {\n    return title === TOTAL_CONFIRMED ? (\n      <BugReport />\n    ) : title === TOTAL_DEATHS ? (\n      <ReportOutlined />\n    ) : title === TOTAL_RECOVERED ? (\n      <Security />\n    ) : (\n      ''\n    );\n  };\n\n  // Parsing incoming DateString\n  const date = parseDateString();\n\n  // Dynamic rendering of the Icon & Classes happens here.\n  const avatarIcon = getAvatarIcon();\n\n  const avatarClassNames = classNames('StatisticCard__Avatar', {\n    'StatisticCard__Avatar--confirmed': title === TOTAL_CONFIRMED,\n    'StatisticCard__Avatar--deaths': title === TOTAL_DEATHS,\n    'StatisticCard__Avatar--recovered': title === TOTAL_RECOVERED,\n  });\n\n  const typographyClassNames = classNames('StatisticCard__Content', {\n    'StatisticCard__Content--confirmed': title === TOTAL_CONFIRMED,\n    'StatisticCard__Content--deaths': title === TOTAL_DEATHS,\n    'StatisticCard__Content--recovered': title === TOTAL_RECOVERED,\n  });\n\n  return (\n    <Card className=\"StatisticCard\" variant=\"outlined\">\n      <CardHeader\n        classes={{ avatar: avatarClassNames }}\n        avatar={avatarIcon}\n        title={title}\n        subheader={`Updated at: ${date}`}\n      />\n      <CardContent classes={{ root: typographyClassNames }}>\n        <Typography variant=\"h3\" component=\"p\">\n          {statistic}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StatisticCard;\n","// Api Related\nexport const COVID_19_BASE_API_URL = 'https://api.covid19api.com';\n\n// General\nexport const COVID_19_HEADER = 'COVID-19 Statistics';\nexport const TOTAL_CONFIRMED = 'Total Confirmed';\nexport const TOTAL_DEATHS = 'Total Deaths';\nexport const TOTAL_RECOVERED = 'Total Recovered';\n\nexport const FOOTER_GENERAL_HEADER = 'About this data';\nexport const FOOTER_RAPID_HEADER = 'It changes rapidly';\nexport const FOOTER_RAPID_PARAGRAPH = `\nThis data changes rapidly, so whatâ€™s shown may be out of date.\nInformation about reported cases is also available on the World Health\nOrganization site.`;\nexport const FOOTER_CASES_HEADER = 'It doesnâ€™t include all cases';\nexport const FOOTER_CASES_PARAGRAPH = `\nConfirmed cases arenâ€™t all cases. They only include people who tested\npositive. Testing rules and availability vary by country.\n`;\n\nexport const SEARCH_FORM_INPUT_TEXT = 'Country';\nexport const SEARCH_FORM_HELPER_TEXT = 'Fill in the Country for which you require Statistics.';\n","// React\nimport React from 'react';\n\n// External\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst LoadingWheel: React.FC = () => {\n  return (\n    <div>\n      <CircularProgress\n        size={100}\n        color={'secondary'}\n        thickness={3.5}\n        variant={'indeterminate'}\n      />\n    </div>\n  );\n};\n\nexport default LoadingWheel;\n","// Axios/Api\nimport axios from 'axios';\n\n// Constants\nimport { COVID_19_BASE_API_URL } from '../constants/general';\n\nexport const getCovid19Statistics = async () => {\n  return await axios.get(`${COVID_19_BASE_API_URL}/summary`).then((result) => result.data);\n};\n\nexport const getCovid19StatisticsByCountryAndStatus = async (country: string, status: string) => {\n  return await axios\n    .get(`${COVID_19_BASE_API_URL}/total/country/${country}/status/${status}`)\n    .then((result) => result.data);\n};\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// Components\nimport StatisticCard from './StatisticCard';\nimport LoadingWheel from './LoadingWheel';\n\n// Api\nimport { getCovid19Statistics } from '../api/Covid19Api';\n\n// Constants\nimport {\n  TOTAL_CONFIRMED,\n  TOTAL_DEATHS,\n  TOTAL_RECOVERED,\n} from '../constants/general';\n\n// Interface\ninterface ICovid19Statistics {\n  Countries: [\n    {\n      TotalConfirmed: number;\n      NewConfirmed: number;\n      TotalDeaths: number;\n      NewDeaths: number;\n      TotalRecovered: number;\n    },\n  ];\n  Date: string;\n}\n\nconst GlobalStatistics = () => {\n  const [\n    covid19Statistics,\n    setCovid19Statistics,\n  ] = useState<ICovid19Statistics | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  let totalConfirmed = 0;\n  let totalDeaths = 0;\n  let totalRecovered = 0;\n\n  useEffect(() => {\n    /**\n     * Get the Global Covid 19 Statistics\n     */\n    async function getCovid19Stats() {\n      setCovid19Statistics(await getCovid19Statistics());\n      setLoading(false);\n    }\n\n    if (loading && !covid19Statistics) {\n      getCovid19Stats();\n    }\n  });\n\n  // Adjusting totalCount with a loop.\n  if (covid19Statistics) {\n    covid19Statistics.Countries.forEach((country) => {\n      totalConfirmed = totalConfirmed + country.TotalConfirmed;\n      totalDeaths = totalDeaths + country.TotalDeaths;\n      totalRecovered = totalRecovered + country.TotalRecovered;\n    });\n  }\n\n  return (\n    <>\n      {loading && <LoadingWheel />}\n      {!loading && covid19Statistics && (\n        <div className=\"Covid19__GlobalStatistics\">\n          <StatisticCard\n            title={TOTAL_CONFIRMED}\n            dateString={covid19Statistics.Date}\n            statistic={totalConfirmed}\n          ></StatisticCard>\n          <StatisticCard\n            title={TOTAL_DEATHS}\n            dateString={covid19Statistics.Date}\n            statistic={totalDeaths}\n          ></StatisticCard>\n          <StatisticCard\n            title={TOTAL_RECOVERED}\n            dateString={covid19Statistics.Date}\n            statistic={totalRecovered}\n          ></StatisticCard>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GlobalStatistics;\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// External\nimport { Area, AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Components\nimport LoadingWheel from './LoadingWheel';\n\n// CSS\nimport './CountryAreaChart.scss';\n\n// Api\nimport { getCovid19StatisticsByCountryAndStatus } from '../api/Covid19Api';\n\n// Interface\ninterface iCountryAreaChartProps {\n  country: string;\n}\ninterface ICovid19CountryStatistics {\n  Country: string;\n  Province: string;\n  Lat: number;\n  Lon: number;\n  Date: string;\n  Cases: number;\n  Confirmed: number;\n  Deaths: number;\n  Recovered: number;\n  Status: string;\n}\n\nconst CountryAreaChart: React.FC<iCountryAreaChartProps> = (props) => {\n  const { country } = props;\n\n  const [loading, setLoading] = useState(true);\n  const [covid19CountryStatistics, setCovid19CountryStatistics] = useState<ICovid19CountryStatistics[] | undefined>(\n    undefined,\n  );\n\n  // TODO: Move this perhaps to a top level component that handles the Data?\n  // TODO: This cluster**** needs to be rewritten obviously.\n  useEffect(() => {\n    /**\n     * Gets the Statistics for a specific Country.\n     */\n    async function getCovid19CountryStatistics() {\n      const covid19StatisticsByCountry: ICovid19CountryStatistics[] = await getCovid19StatisticsByCountryAndStatus(\n        country,\n        'confirmed',\n      );\n      const covid19StatisticsByCountryDeaths: ICovid19CountryStatistics[] = await getCovid19StatisticsByCountryAndStatus(\n        country,\n        'deaths',\n      );\n      const covid19StatisticsByCountryRecovered: ICovid19CountryStatistics[] = await getCovid19StatisticsByCountryAndStatus(\n        country,\n        'recovered',\n      );\n\n      const covid19ResultWithConfirmed:\n        | ICovid19CountryStatistics[]\n        | undefined = await handleCovid19StatisticsByCountry(covid19StatisticsByCountry);\n\n      const covid19ResultWithDeaths:\n        | ICovid19CountryStatistics[]\n        | undefined = await handleCovid19StatisticsByCountryDeaths(\n        covid19StatisticsByCountryDeaths,\n        covid19ResultWithConfirmed,\n      );\n\n      const covid19ResultWithRecovered:\n        | ICovid19CountryStatistics[]\n        | undefined = await handleCovid19StatisticsByCountryRecovered(\n        covid19StatisticsByCountryRecovered,\n        covid19ResultWithDeaths,\n      );\n\n      setCovid19CountryStatistics(covid19ResultWithRecovered);\n    }\n\n    getCovid19CountryStatistics();\n    setLoading(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [country]);\n\n  const handleCovid19StatisticsByCountry = async (covid19StatisticsByCountry: ICovid19CountryStatistics[]) => {\n    if (covid19StatisticsByCountry && Object.keys(covid19StatisticsByCountry).length > 0) {\n      return covid19StatisticsByCountry.map((country) => {\n        const dateToString = parseDate(country.Date);\n        // We change our DataSet here as we know we will only use it on this page.\n        country.Date = dateToString;\n        country.Confirmed = country.Cases;\n        return country;\n      });\n    }\n  };\n\n  const handleCovid19StatisticsByCountryDeaths = async (\n    covid19StatisticsByCountryDeaths: ICovid19CountryStatistics[],\n    covid19ResultWithConfirmed: ICovid19CountryStatistics[] | undefined,\n  ) => {\n    if (\n      covid19StatisticsByCountryDeaths &&\n      covid19ResultWithConfirmed &&\n      Object.keys(covid19StatisticsByCountryDeaths).length > 0\n    ) {\n      return covid19ResultWithConfirmed.map((country) => {\n        const countryFound = covid19StatisticsByCountryDeaths.find(\n          (countryWithConfirmed) => parseDate(countryWithConfirmed.Date) === country.Date,\n        );\n\n        if (countryFound) country.Deaths = countryFound.Cases;\n        return country;\n      });\n    }\n  };\n\n  const handleCovid19StatisticsByCountryRecovered = async (\n    covid19StatisticsByCountryRecovered: ICovid19CountryStatistics[],\n    covid19ResultWithDeaths: ICovid19CountryStatistics[] | undefined,\n  ) => {\n    if (\n      covid19StatisticsByCountryRecovered &&\n      covid19ResultWithDeaths &&\n      Object.keys(covid19StatisticsByCountryRecovered).length > 0\n    ) {\n      return covid19ResultWithDeaths.map((country) => {\n        const countryFound = covid19StatisticsByCountryRecovered.find(\n          (countryWithDeaths) => parseDate(countryWithDeaths.Date) === country.Date,\n        );\n\n        if (countryFound) country.Recovered = countryFound.Cases;\n        return country;\n      });\n    }\n  };\n\n  const parseDate = (countryDate: string) => {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n    };\n\n    // Parsing incoming DateString\n    const date = new Date(Date.parse(countryDate));\n    return date.toLocaleDateString('nl-NL', options);\n  };\n\n  return (\n    <>\n      {loading && <LoadingWheel />}\n      {covid19CountryStatistics && (\n        <div style={{ width: '50%', height: 300 }} className=\"CountryAreaChart\">\n          <ResponsiveContainer>\n            <AreaChart width={600} height={400} data={covid19CountryStatistics}>\n              <CartesianGrid strokeDasharray=\"1 1\" />\n              <XAxis dataKey=\"Date\" />\n              <YAxis />\n              <Tooltip />\n              <Legend verticalAlign=\"top\" height={36} />\n              <Area type=\"monotone\" dataKey=\"Confirmed\" fillOpacity={0.5} stroke=\"#027be3\" fill=\"#027be3\" />\n              <Area type=\"monotone\" dataKey=\"Deaths\" fillOpacity={0.5} stroke=\"#f44336\" fill=\"#f44336\" />\n              <Area type=\"monotone\" dataKey=\"Recovered\" fillOpacity={0.5} stroke=\"#009688\" fill=\"#009688\" />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default CountryAreaChart;\n","// React\nimport React, { useState } from 'react';\n\n// Material UI\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\n// Constants\nimport { SEARCH_FORM_INPUT_TEXT, SEARCH_FORM_HELPER_TEXT } from '../constants/general';\n\ninterface ISearchFormProps {\n  setCountryState: Function;\n}\n\nconst SearchForm: React.FC<ISearchFormProps> = (props) => {\n  const [input, setInput] = useState('');\n\n  const handleCountrySearch = () => {\n    props.setCountryState(input);\n  };\n\n  const handleCountryChange = (event: any) => {\n    setInput(event.target.value);\n  };\n\n  return (\n    <FormControl\n      onKeyPress={(event: any) => {\n        if (event.key === 'Enter') {\n          handleCountrySearch();\n        }\n      }}\n    >\n      <InputLabel htmlFor=\"country-input\">{SEARCH_FORM_INPUT_TEXT}</InputLabel>\n      <Input value={input} onChange={handleCountryChange} id=\"country-input\" aria-describedby=\"country-helper\" />\n      <FormHelperText id=\"country-helper\">{SEARCH_FORM_HELPER_TEXT}</FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default SearchForm;\n","// React\nimport React, { useState } from 'react';\n\n// CSS\nimport './App.scss';\n\n// Components\nimport GlobalStatistics from './components/GlobalStatistics';\nimport CountryAreaChart from './components/CountryAreaChart';\nimport SearchForm from './components/SearchForm';\n\n// Constants\nimport {\n  COVID_19_HEADER,\n  FOOTER_GENERAL_HEADER,\n  FOOTER_RAPID_HEADER,\n  FOOTER_RAPID_PARAGRAPH,\n  FOOTER_CASES_HEADER,\n  FOOTER_CASES_PARAGRAPH,\n} from './constants/general';\n\nconst App = () => {\n  const [country, setCountry] = useState('');\n\n  const setCountryState = async (country: string) => {\n    setCountry(country);\n  };\n\n  return (\n    <div className=\"Covid19\">\n      <header className=\"Covid19__Header\">{COVID_19_HEADER}</header>\n      <div className=\"Covid19__GlobalStatistics\">\n        <GlobalStatistics />\n      </div>\n      <div className=\"Covid19__SearchForm\">\n        <SearchForm setCountryState={setCountryState} />\n      </div>\n      <div className=\"Covid19__CountryAreaChart\">{country && <CountryAreaChart country={country} />}</div>\n      <footer className=\"Covid19__Footer\">\n        <h3 className=\"Covid19__Footer--h3\">{FOOTER_GENERAL_HEADER}</h3>\n        <h4 className=\"Covid19__Footer--h4\">{FOOTER_RAPID_HEADER}</h4>\n        <p className=\"Covid19__Footer--p\">{FOOTER_RAPID_PARAGRAPH}</p>\n        <h4 className=\"Covid19__Footer--h4\">{FOOTER_CASES_HEADER}</h4>\n        <p className=\"Covid19__Footer--p\">{FOOTER_CASES_PARAGRAPH}</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './index.scss';\n\n// Components\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}