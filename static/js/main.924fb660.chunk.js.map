{"version":3,"sources":["components/StatisticCard.tsx","constants/general.ts","components/LoadingWheel.tsx","api/Covid19Api.ts","components/GlobalStatistics.tsx","components/CountryLineChart.tsx","components/SearchForm.tsx","App.tsx","index.tsx"],"names":["StatisticCard","props","title","dateString","statistic","date","Date","parse","toLocaleDateString","year","month","day","hour","minute","second","avatarIcon","BugReport","ReportOutlined","Security","avatarClassNames","classNames","typographyClassNames","Card","className","variant","CardHeader","classes","avatar","subheader","CardContent","root","Typography","component","LoadingWheel","CircularProgress","size","color","thickness","getCovid19Statistics","a","axios","get","then","result","data","getCovid19StatisticsByCountry","country","GlobalStatistics","useState","covid19Statistics","setCovid19Statistics","loading","setLoading","totalConfirmed","totalDeaths","totalRecovered","useEffect","getCovid19Stats","Countries","forEach","TotalConfirmed","TotalDeaths","TotalRecovered","CountryLineChart","covid19CountryStatistics","setCovid19CountryStatistics","covid19StatisticsByCountry","Object","keys","length","dateToString","getCovid19CountryStatistics","width","height","strokeDasharray","dataKey","verticalAlign","type","stroke","activeDot","r","SearchForm","input","setInput","FormControl","onKeyPress","event","key","setCountryState","InputLabel","htmlFor","Input","value","onChange","target","id","aria-describedby","FormHelperText","App","setCountry","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.924fb660.chunk.js","sourcesContent":["// React\nimport React from 'react';\n\n// External\nimport classNames from 'classnames';\n\n// CSS\nimport './StatisticCard.scss';\n\n// Material UI\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Typography from '@material-ui/core/Typography';\n\n// Icons\nimport { BugReport, ReportOutlined, Security } from '@material-ui/icons';\n\n// Constants\nimport { TOTAL_CONFIRMED, TOTAL_DEATHS, TOTAL_RECOVERED } from '../constants/general';\n\ninterface IStatisticCardProps {\n  title: string;\n  dateString: string;\n  statistic: number;\n}\n\nconst StatisticCard: React.FC<IStatisticCardProps> = (props) => {\n  const { title, dateString, statistic } = props;\n\n  /**\n   * Parses the incoming dateString to a Date object.\n   *\n   * @param {string} dateString\n   *\n   * @returns {string}\n   */\n  const parseDateString = (): string => {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n    };\n\n    const date = new Date(Date.parse(dateString));\n    return date.toLocaleDateString('nl-NL', options);\n  };\n\n  /**\n   * Checks which Avatar Icon to get and returns it.\n   *\n   * @returns {BugReport || ReportOutlined || Security}\n   */\n  const getAvatarIcon = () => {\n    return title === TOTAL_CONFIRMED ? (\n      <BugReport />\n    ) : title === TOTAL_DEATHS ? (\n      <ReportOutlined />\n    ) : title === TOTAL_RECOVERED ? (\n      <Security />\n    ) : (\n      ''\n    );\n  };\n\n  // Parsing incoming DateString\n  const date = parseDateString();\n\n  // Dynamic rendering of the Icon & Classes happens here.\n  const avatarIcon = getAvatarIcon();\n\n  const avatarClassNames = classNames('StatisticCard__Avatar', {\n    'StatisticCard__Avatar--confirmed': title === TOTAL_CONFIRMED,\n    'StatisticCard__Avatar--deaths': title === TOTAL_DEATHS,\n    'StatisticCard__Avatar--recovered': title === TOTAL_RECOVERED,\n  });\n\n  const typographyClassNames = classNames('StatisticCard__Content', {\n    'StatisticCard__Content--confirmed': title === TOTAL_CONFIRMED,\n    'StatisticCard__Content--deaths': title === TOTAL_DEATHS,\n    'StatisticCard__Content--recovered': title === TOTAL_RECOVERED,\n  });\n\n  return (\n    <Card className=\"StatisticCard\" variant=\"outlined\">\n      <CardHeader\n        classes={{ avatar: avatarClassNames }}\n        avatar={avatarIcon}\n        title={title}\n        subheader={`Updated at: ${date}`}\n      />\n      <CardContent classes={{ root: typographyClassNames }}>\n        <Typography variant=\"h3\" component=\"p\">\n          {statistic}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StatisticCard;\n","// Api Related\nexport const COVID_19_BASE_API_URL = 'https://api.covid19api.com';\n\n// General\nexport const COVID_19_HEADER = 'COVID-19 Statistics';\nexport const TOTAL_CONFIRMED = 'Total Confirmed';\nexport const TOTAL_DEATHS = 'Total Deaths';\nexport const TOTAL_RECOVERED = 'Total Recovered';\n\nexport const FOOTER_GENERAL_HEADER = 'About this data';\nexport const FOOTER_RAPID_HEADER = 'It changes rapidly';\nexport const FOOTER_RAPID_PARAGRAPH = `\nThis data changes rapidly, so what’s shown may be out of date.\nInformation about reported cases is also available on the World Health\nOrganization site.`;\nexport const FOOTER_CASES_HEADER = 'It doesn’t include all cases';\nexport const FOOTER_CASES_PARAGRAPH = `\nConfirmed cases aren’t all cases. They only include people who tested\npositive. Testing rules and availability vary by country.\n`;\n\nexport const SEARCH_FORM_INPUT_TEXT = 'Country';\nexport const SEARCH_FORM_HELPER_TEXT = 'Fill in the Country for which you require Statistics.';\n","// React\nimport React from 'react';\n\n// External\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst LoadingWheel: React.FC = () => {\n  return (\n    <div>\n      <CircularProgress\n        size={100}\n        color={'secondary'}\n        thickness={3.5}\n        variant={'indeterminate'}\n      />\n    </div>\n  );\n};\n\nexport default LoadingWheel;\n","// Axios/Api\nimport axios from 'axios';\n\n// Constants\nimport { COVID_19_BASE_API_URL } from '../constants/general';\n\nexport const getCovid19Statistics = async () => {\n  return await axios\n    .get(`${COVID_19_BASE_API_URL}/summary`)\n    .then((result) => result.data);\n};\n\nexport const getCovid19StatisticsByCountry = async (country: string) => {\n  return await axios\n    .get(`${COVID_19_BASE_API_URL}/total/country/${country}/status/confirmed`)\n    .then((result) => result.data);\n};\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// Components\nimport StatisticCard from './StatisticCard';\nimport LoadingWheel from './LoadingWheel';\n\n// Api\nimport { getCovid19Statistics } from '../api/Covid19Api';\n\n// Constants\nimport {\n  TOTAL_CONFIRMED,\n  TOTAL_DEATHS,\n  TOTAL_RECOVERED,\n} from '../constants/general';\n\n// Interface\ninterface ICovid19Statistics {\n  Countries: [\n    {\n      TotalConfirmed: number;\n      NewConfirmed: number;\n      TotalDeaths: number;\n      NewDeaths: number;\n      TotalRecovered: number;\n    },\n  ];\n  Date: string;\n}\n\nconst GlobalStatistics = () => {\n  const [\n    covid19Statistics,\n    setCovid19Statistics,\n  ] = useState<ICovid19Statistics | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  let totalConfirmed = 0;\n  let totalDeaths = 0;\n  let totalRecovered = 0;\n\n  useEffect(() => {\n    /**\n     * Get the Global Covid 19 Statistics\n     */\n    async function getCovid19Stats() {\n      setCovid19Statistics(await getCovid19Statistics());\n      setLoading(false);\n    }\n\n    if (loading && !covid19Statistics) {\n      getCovid19Stats();\n    }\n  });\n\n  // Adjusting totalCount with a loop.\n  if (covid19Statistics) {\n    covid19Statistics.Countries.forEach((country) => {\n      totalConfirmed = totalConfirmed + country.TotalConfirmed;\n      totalDeaths = totalDeaths + country.TotalDeaths;\n      totalRecovered = totalRecovered + country.TotalRecovered;\n    });\n  }\n\n  return (\n    <>\n      {loading && <LoadingWheel />}\n      {!loading && covid19Statistics && (\n        <div className=\"Covid19__GlobalStatistics\">\n          <StatisticCard\n            title={TOTAL_CONFIRMED}\n            dateString={covid19Statistics.Date}\n            statistic={totalConfirmed}\n          ></StatisticCard>\n          <StatisticCard\n            title={TOTAL_DEATHS}\n            dateString={covid19Statistics.Date}\n            statistic={totalDeaths}\n          ></StatisticCard>\n          <StatisticCard\n            title={TOTAL_RECOVERED}\n            dateString={covid19Statistics.Date}\n            statistic={totalRecovered}\n          ></StatisticCard>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GlobalStatistics;\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// External\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// Components\nimport LoadingWheel from './LoadingWheel';\n\n// CSS\nimport './CountryLineChart.scss';\n\n// Api\nimport { getCovid19StatisticsByCountry } from '../api/Covid19Api';\n\n// Interface\ninterface iCountryLineChartProps {\n  country: string;\n}\ninterface ICovid19CountryStatistics {\n  Country: string;\n  Province: string;\n  Lat: number;\n  Lon: number;\n  Date: string;\n  Cases: number;\n  Status: string;\n}\n\nconst CountryLineChart: React.FC<iCountryLineChartProps> = (props) => {\n  const { country } = props;\n\n  const [loading, setLoading] = useState(true);\n  const [covid19CountryStatistics, setCovid19CountryStatistics] = useState<[ICovid19CountryStatistics] | null>(null);\n\n  // TODO: Move this perhaps to a top level component that handles the Data?\n  useEffect(() => {\n    /**\n     * Gets the Statistics for a specific Country.\n     */\n    async function getCovid19CountryStatistics() {\n      const covid19StatisticsByCountry = await getCovid19StatisticsByCountry(country);\n\n      // TODO: Error handling for SearchControl.\n      if (covid19StatisticsByCountry && Object.keys(covid19StatisticsByCountry).length > 0) {\n        //@ts-ignore\n        await covid19StatisticsByCountry.forEach((country) => {\n          // Parsing incoming DateString\n          const options = {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n          };\n          const date = new Date(Date.parse(country.Date));\n          const dateToString = date.toLocaleDateString('nl-NL', options);\n          // We change our DataSet here as we know we will only use it on this page.\n          country.Date = dateToString;\n        });\n\n        setCovid19CountryStatistics(covid19StatisticsByCountry);\n      }\n    }\n\n    getCovid19CountryStatistics();\n    setLoading(false);\n  }, [country]);\n\n  // TODO: Add Responsive Layout\n  return (\n    <>\n      {loading && <LoadingWheel />}\n      {covid19CountryStatistics && (\n        <div className=\"CountryLineChart\">\n          <LineChart width={600} height={300} data={covid19CountryStatistics}>\n            <CartesianGrid strokeDasharray=\"1 1\" />\n            <XAxis dataKey=\"Date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend verticalAlign=\"top\" height={36} />\n            <Line type=\"monotone\" dataKey=\"Cases\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n          </LineChart>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default CountryLineChart;\n","// React\nimport React, { useRef, useState } from 'react';\n\n// Material UI\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\n// Constants\nimport { SEARCH_FORM_INPUT_TEXT, SEARCH_FORM_HELPER_TEXT } from '../constants/general';\n\ninterface ISearchFormProps {\n  setCountryState: Function;\n}\n\nconst SearchForm: React.FC<ISearchFormProps> = (props) => {\n  const [input, setInput] = useState('');\n\n  const handleCountrySearch = () => {\n    props.setCountryState(input);\n  };\n\n  const handleCountryChange = (event: any) => {\n    setInput(event.target.value);\n  };\n\n  return (\n    <FormControl\n      onKeyPress={(event: any) => {\n        if (event.key === 'Enter') {\n          handleCountrySearch();\n        }\n      }}\n    >\n      <InputLabel htmlFor=\"country-input\">{SEARCH_FORM_INPUT_TEXT}</InputLabel>\n      <Input value={input} onChange={handleCountryChange} id=\"country-input\" aria-describedby=\"country-helper\" />\n      <FormHelperText id=\"country-helper\">{SEARCH_FORM_HELPER_TEXT}</FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default SearchForm;\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// CSS\nimport './App.scss';\n\n// Components\nimport GlobalStatistics from './components/GlobalStatistics';\nimport CountryLineChart from './components/CountryLineChart';\nimport SearchForm from './components/SearchForm';\n\n// Constants\nimport {\n  COVID_19_HEADER,\n  FOOTER_GENERAL_HEADER,\n  FOOTER_RAPID_HEADER,\n  FOOTER_RAPID_PARAGRAPH,\n  FOOTER_CASES_HEADER,\n  FOOTER_CASES_PARAGRAPH,\n} from './constants/general';\n\nconst App = () => {\n  const [country, setCountry] = useState('');\n\n  const setCountryState = async (country: string) => {\n    setCountry(country);\n  };\n\n  return (\n    <div className=\"Covid19\">\n      <header className=\"Covid19__Header\">{COVID_19_HEADER}</header>\n      <div className=\"Covid19__GlobalStatistics\">\n        <GlobalStatistics />\n      </div>\n      <div className=\"Covid19__SearchForm\">\n        <SearchForm setCountryState={setCountryState} />\n      </div>\n      <div className=\"Covid19__CountryLineChart\">{country && <CountryLineChart country={country} />}</div>\n      <footer className=\"Covid19__Footer\">\n        <h3 className=\"Covid19__Footer--h3\">{FOOTER_GENERAL_HEADER}</h3>\n        <h4 className=\"Covid19__Footer--h4\">{FOOTER_RAPID_HEADER}</h4>\n        <p className=\"Covid19__Footer--p\">{FOOTER_RAPID_PARAGRAPH}</p>\n        <h4 className=\"Covid19__Footer--h4\">{FOOTER_CASES_HEADER}</h4>\n        <p className=\"Covid19__Footer--p\">{FOOTER_CASES_PARAGRAPH}</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './index.scss';\n\n// Components\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}